AWSTemplateFormatVersion: '2010-09-09'
Description: Scheduled EC2 instance scaling based on time using Lambda and tags.

Parameters:
  LambdaFunctionName:
    Type: String
    Default: DynamicEC2Scheduler
  LambdaScheduleUpTime:
    Type: String
    Default: "cron(0 4 ? * MON-FRI *)"
  LambdaScheduleDownTime:
    Type: String
    Default: "cron(0 19 ? * MON-FRI *)"

Resources:

  EC2ScalerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunctionName}"
      RetentionInDays: 14

  EC2ScalerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2ScalerLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EC2ScalerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - kms:CreateGrant
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:StopInstances
                  - ec2:StartInstances
                  - ec2:ModifyInstanceAttribute
                  - ec2:CreateTags
                Resource: "*"
                Condition:
                  StringEquals:
                    ec2:ResourceTag/DynamicInstanceScaling: "true"

  EC2ScalerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Description: Scales EC2 instances up or down based on schedule and tags
      Runtime: python3.12
      Role: !GetAtt EC2ScalerRole.Arn
      Handler: index.lambda_handler
      MemorySize: 512
      ReservedConcurrentExecutions: 10
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import time
          ec2 = boto3.client('ec2')

          DOWNSIZE_TYPE = "t3.medium"
          VALID_ACTIONS = {"scaleup", "scaledown"}

          def lambda_handler(event, context):
              action = event.get("action")
              source = event.get("source", "manual")

              if action not in VALID_ACTIONS:
                  raise ValueError(f"Invalid or missing 'action'. Must be one of: {VALID_ACTIONS}")

              if source == "manual":
                  raise Exception("Manual execution is blocked. Use EventBridge scheduled rules.")

              print(f"Starting EC2 {action} process...")

              reservations = ec2.describe_instances(
                  Filters=[
                      {"Name": "tag:DynamicInstanceScaling", "Values": ["true"]},
                      {"Name": "instance-state-name", "Values": ["running", "stopped"]}
                  ]
              )["Reservations"]

              for reservation in reservations:
                  for instance in reservation["Instances"]:
                      instance_id = instance["InstanceId"]
                      current_type = instance["InstanceType"]
                      state = instance["State"]["Name"]
                      tags = {t["Key"]: t["Value"] for t in instance.get("Tags", [])}

                      print(f"\nProcessing {instance_id} ({state}, {current_type})")

                      if action == "scaledown":
                          if current_type == DOWNSIZE_TYPE:
                              print("Already at downsized type. Skipping.")
                              continue

                          print(f"Tagging {instance_id} with PreferredInstanceType = {current_type}")
                          ec2.create_tags(
                              Resources=[instance_id],
                              Tags=[{"Key": "PreferredInstanceType", "Value": current_type}]
                          )
                          desired_type = DOWNSIZE_TYPE

                      elif action == "scaleup":
                          desired_type = tags.get("PreferredInstanceType")
                          if not desired_type:
                              print("No PreferredInstanceType tag found. Skipping.")
                              continue
                          if current_type == desired_type:
                              print("Already at desired type. Skipping.")
                              continue

                      if state != "stopped":
                          print(f"Stopping {instance_id}...")
                          ec2.stop_instances(InstanceIds=[instance_id])
                          ec2.get_waiter("instance_stopped").wait(InstanceIds=[instance_id])
                          print("Sleeping 10 seconds after stop...")
                          time.sleep(10)

                      print(f"Modifying {instance_id} to {desired_type}...")
                      ec2.modify_instance_attribute(
                          InstanceId=instance_id,
                          InstanceType={"Value": desired_type}
                      )
                      print("Sleeping 10 seconds after modification...")
                      time.sleep(10)
                      print("Waiting before start...")
                      time.sleep(10)

                      for attempt in range(2):
                          try:
                              ec2.start_instances(InstanceIds=[instance_id])
                              print(f"Start attempt {attempt + 1} succeeded for {instance_id}.")
                              break
                          except Exception as e:
                              print(f"Start attempt {attempt + 1} failed: {e}")
                              if attempt == 1:
                                  raise
                              time.sleep(10)

                      for attempt in range(6):
                          status = ec2.describe_instances(InstanceIds=[instance_id])["Reservations"][0]["Instances"][0]["State"]["Name"]
                          if status == "running":
                              print(f"{instance_id} is running.")
                              break
                          print(f"{instance_id} still in state: {status}. Waiting...")
                          time.sleep(15)
                      else:
                          raise Exception(f"{instance_id} did not reach 'running' state after 90 seconds.")

              print("Lambda execution completed.")

  EC2ScalerScheduleDown:
    Type: AWS::Events::Rule
    DependsOn: EC2ScalerFunction
    Properties:
      Name: EC2ScalerScheduleDown
      Description: Triggers Lambda to scale down EC2 instances at 7 PM Pacific, Monday through Friday
      ScheduleExpression: !Ref LambdaScheduleDownTime
      ScheduleExpressionTimezone: America/Los_Angeles
      State: ENABLED
      Targets:
        - Arn: !GetAtt EC2ScalerFunction.Arn
          Id: DownTarget
          Input: '{"action": "scaledown", "source": "eventbridge"}'

  EC2ScalerScheduleUp:
    Type: AWS::Events::Rule
    DependsOn: EC2ScalerFunction
    Properties:
      Name: EC2ScalerScheduleUp
      Description: Triggers Lambda to scale up EC2 instances at 4 AM Pacific, Monday through Friday
      ScheduleExpression: !Ref LambdaScheduleUpTime
      ScheduleExpressionTimezone: America/Los_Angeles
      State: ENABLED
      Targets:
        - Arn: !GetAtt EC2ScalerFunction.Arn
          Id: UpTarget
          Input: '{"action": "scaleup", "source": "eventbridge"}'

  LambdaInvokePermissionDown:
    Type: AWS::Lambda::Permission
    DependsOn: EC2ScalerScheduleDown
    Properties:
      FunctionName: !Ref EC2ScalerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EC2ScalerScheduleDown.Arn

  LambdaInvokePermissionUp:
    Type: AWS::Lambda::Permission
    DependsOn: EC2ScalerScheduleUp
    Properties:
      FunctionName: !Ref EC2ScalerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EC2ScalerScheduleUp.Arn
